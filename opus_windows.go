// Code generated by 'go generate'; DO NOT EDIT.

// +build windows

package opus

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modopus = syscall.NewLazyDLL("opus.dll")

	procopus_decoder_get_size = modopus.NewProc("opus_decoder_get_size")
	procopus_decoder_init     = modopus.NewProc("opus_decoder_init")
	procopus_decode           = modopus.NewProc("opus_decode")
	procopus_decode_float     = modopus.NewProc("opus_decode_float")
	procopus_encoder_get_size = modopus.NewProc("opus_encoder_get_size")
	procopus_encoder_init     = modopus.NewProc("opus_encoder_init")
	procopus_encoder_ctl      = modopus.NewProc("opus_encoder_ctl")
	procopus_encoder_get_ctl  = modopus.NewProc("opus_encoder_ctl")
	procopus_encode           = modopus.NewProc("opus_encode")
	procopus_encode_float     = modopus.NewProc("opus_encode_float")
)

func opus_decoder_get_size(channles int) (size int) {
	r0, _, _ := syscall.Syscall(procopus_decoder_get_size.Addr(), 1, uintptr(channles), 0, 0)
	size = int(r0)
	return
}

func opus_decoder_init(p unsafe.Pointer, sampleRate int32, channels int) (err int) {
	r0, _, _ := syscall.Syscall(procopus_decoder_init.Addr(), 3, uintptr(p), uintptr(sampleRate), uintptr(channels))
	err = int(r0)
	return
}

func opus_decode(p unsafe.Pointer, data []byte, out []int16, channels int) (n int) {
	var _p0 *byte
	if len(data) > 0 {
		_p0 = &data[0]
	}
	var _p1 *int16
	if len(out) > 0 {
		_p1 = &out[0]
	}
	r0, _, _ := syscall.Syscall6(procopus_decode.Addr(), 6, uintptr(p), uintptr(unsafe.Pointer(_p0)), uintptr(int32(len(data))), uintptr(unsafe.Pointer(_p1)), uintptr(cap(out)/channels), 0)
	n = int(r0)
	return
}

func opus_decode_float(p unsafe.Pointer, data []byte, out []float32, channels int) (n int) {
	var _p0 *byte
	if len(data) > 0 {
		_p0 = &data[0]
	}
	var _p1 *float32
	if len(out) > 0 {
		_p1 = &out[0]
	}
	r0, _, _ := syscall.Syscall6(procopus_decode_float.Addr(), 6, uintptr(p), uintptr(unsafe.Pointer(_p0)), uintptr(int32(len(data))), uintptr(unsafe.Pointer(_p1)), uintptr(cap(out)/channels), 0)
	n = int(r0)
	return
}

func opus_encoder_get_size(channles int) (size int) {
	r0, _, _ := syscall.Syscall(procopus_encoder_get_size.Addr(), 1, uintptr(channles), 0, 0)
	size = int(r0)
	return
}

func opus_encoder_init(p unsafe.Pointer, sampleRate int32, channels int, application int) (err int) {
	r0, _, _ := syscall.Syscall6(procopus_encoder_init.Addr(), 4, uintptr(p), uintptr(sampleRate), uintptr(channels), uintptr(application), 0, 0)
	err = int(r0)
	return
}

func opus_encoder_ctl(p unsafe.Pointer, reqType int, req int32) (res int) {
	r0, _, _ := syscall.Syscall(procopus_encoder_ctl.Addr(), 3, uintptr(p), uintptr(reqType), uintptr(req))
	res = int(r0)
	return
}

func opus_encoder_get_ctl(p unsafe.Pointer, reqType int, req *int32) (res int) {
	r0, _, _ := syscall.Syscall(procopus_encoder_ctl.Addr(), 3, uintptr(p), uintptr(reqType), uintptr(unsafe.Pointer(req)))
	res = int(r0)
	return
}

func opus_encode(p unsafe.Pointer, pcm []int16, out []byte) (n int) {
	var _p0 *int16
	if len(pcm) > 0 {
		_p0 = &pcm[0]
	}
	var _p1 *byte
	if len(out) > 0 {
		_p1 = &out[0]
	}
	r0, _, _ := syscall.Syscall6(procopus_encode.Addr(), 5, uintptr(p), uintptr(unsafe.Pointer(_p0)), uintptr(len(pcm)), uintptr(unsafe.Pointer(_p1)), uintptr(len(out)), 0)
	n = int(r0)
	return
}

func opus_encode_float(p unsafe.Pointer, pcm []float32, out []byte) (n int) {
	var _p0 *float32
	if len(pcm) > 0 {
		_p0 = &pcm[0]
	}
	var _p1 *byte
	if len(out) > 0 {
		_p1 = &out[0]
	}
	r0, _, _ := syscall.Syscall6(procopus_encode_float.Addr(), 5, uintptr(p), uintptr(unsafe.Pointer(_p0)), uintptr(len(pcm)), uintptr(unsafe.Pointer(_p1)), uintptr(len(out)), 0)
	n = int(r0)
	return
}
